# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: proto/gamma.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


@dataclass(eq=False, repr=False)
class GammaRequest(betterproto.Message):
    axes_reference: "Double2DArray" = betterproto.message_field(1)
    dose_reference: "DoubleNdArray" = betterproto.message_field(2)
    axes_evaluation: "Double2DArray" = betterproto.message_field(3)
    dose_evaluation: "DoubleNdArray" = betterproto.message_field(4)
    dose_percent_threshold: float = betterproto.double_field(5)
    distance_threshold: float = betterproto.double_field(6)
    lower_percent_dose_cutoff: float = betterproto.double_field(7)
    interpolation_fraction: float = betterproto.double_field(8)
    max_gamma: float = betterproto.double_field(9)
    local_gamma: bool = betterproto.bool_field(10)
    global_normalisation: float = betterproto.double_field(11)
    random_subset: int = betterproto.int64_field(12)
    ram_available: int = betterproto.int64_field(13)


@dataclass(eq=False, repr=False)
class GammaReply(betterproto.Message):
    data: "DoubleNdArray" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Double1DArray(betterproto.Message):
    data: List[float] = betterproto.double_field(1)


@dataclass(eq=False, repr=False)
class Double2DArray(betterproto.Message):
    data: List["Double1DArray"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Double3DArray(betterproto.Message):
    data: List["Double2DArray"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class DoubleNdArray(betterproto.Message):
    array1_d: "Double1DArray" = betterproto.message_field(1, group="type")
    array2_d: "Double2DArray" = betterproto.message_field(2, group="type")
    array3_d: "Double3DArray" = betterproto.message_field(3, group="type")


class GreeterStub(betterproto.ServiceStub):
    async def gamma(
        self,
        *,
        axes_reference: "Double2DArray" = None,
        dose_reference: "DoubleNdArray" = None,
        axes_evaluation: "Double2DArray" = None,
        dose_evaluation: "DoubleNdArray" = None,
        dose_percent_threshold: float = 0.0,
        distance_threshold: float = 0.0,
        lower_percent_dose_cutoff: float = 0.0,
        interpolation_fraction: float = 0.0,
        max_gamma: float = 0.0,
        local_gamma: bool = False,
        global_normalisation: float = 0.0,
        random_subset: int = 0,
        ram_available: int = 0
    ) -> "GammaReply":

        request = GammaRequest()
        if axes_reference is not None:
            request.axes_reference = axes_reference
        if dose_reference is not None:
            request.dose_reference = dose_reference
        if axes_evaluation is not None:
            request.axes_evaluation = axes_evaluation
        if dose_evaluation is not None:
            request.dose_evaluation = dose_evaluation
        request.dose_percent_threshold = dose_percent_threshold
        request.distance_threshold = distance_threshold
        request.lower_percent_dose_cutoff = lower_percent_dose_cutoff
        request.interpolation_fraction = interpolation_fraction
        request.max_gamma = max_gamma
        request.local_gamma = local_gamma
        request.global_normalisation = global_normalisation
        request.random_subset = random_subset
        request.ram_available = ram_available

        return await self._unary_unary("/gamma.Greeter/Gamma", request, GammaReply)


class GreeterBase(ServiceBase):
    async def gamma(
        self,
        axes_reference: "Double2DArray",
        dose_reference: "DoubleNdArray",
        axes_evaluation: "Double2DArray",
        dose_evaluation: "DoubleNdArray",
        dose_percent_threshold: float,
        distance_threshold: float,
        lower_percent_dose_cutoff: float,
        interpolation_fraction: float,
        max_gamma: float,
        local_gamma: bool,
        global_normalisation: float,
        random_subset: int,
        ram_available: int,
    ) -> "GammaReply":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_gamma(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "axes_reference": request.axes_reference,
            "dose_reference": request.dose_reference,
            "axes_evaluation": request.axes_evaluation,
            "dose_evaluation": request.dose_evaluation,
            "dose_percent_threshold": request.dose_percent_threshold,
            "distance_threshold": request.distance_threshold,
            "lower_percent_dose_cutoff": request.lower_percent_dose_cutoff,
            "interpolation_fraction": request.interpolation_fraction,
            "max_gamma": request.max_gamma,
            "local_gamma": request.local_gamma,
            "global_normalisation": request.global_normalisation,
            "random_subset": request.random_subset,
            "ram_available": request.ram_available,
        }

        response = await self.gamma(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/gamma.Greeter/Gamma": grpclib.const.Handler(
                self.__rpc_gamma,
                grpclib.const.Cardinality.UNARY_UNARY,
                GammaRequest,
                GammaReply,
            ),
        }
